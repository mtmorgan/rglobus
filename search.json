[{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"introduction-installation","dir":"Articles","previous_headings":"","what":"Introduction & installation","title":"Getting Started","text":"package EXPERIMENTAL. enables access Globus collection management (including ‘personal’ collections computer), including file directory transfer. functions implemented package primarily Globus ‘Transfer’ API, documented https://docs.globus.org/api/transfer/. Many capabilities Globus implemented. Install package necessary Attach package R session","code":"if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rglobus\") library(rglobus)"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"discovering-and-navigating-collections","dir":"Articles","previous_headings":"","what":"Discovering and navigating collections","title":"Getting Started","text":"functions discussed based APIs described Endpoints Collections Endpoint Collection Search. Globus data sets organized collections. Start discovering collections contain words “HuBMAP” “Public”, order.","code":"hubmap_collections <- collections(\"HuBMAP Public\") hubmap_collections ## # A tibble: 4 × 2 ##   display_name        id                                   ##   <chr>               <chr>                                ## 1 HuBMAP Public       af603d86-eab9-4eec-bb1d-9d26556741bb ## 2 HuBMAP Dev Public   2b82f085-1d50-4c93-897e-cd79d77481ed ## 3 HuBMAP Stage Public 4b383482-8c5c-48fb-8b80-a450338ca383 ## 4 HuBMAP Test Public  1e12c423-dd17-4095-a9f8-12555ee83345"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"authentication","dir":"Articles","previous_headings":"Discovering and navigating collections","what":"Authentication","title":"Getting Started","text":"first time collections() invoked, Globus requires authenticate. web page appears, one can choose authentication via generic identifiers like ORCID Google, institution belong . Follow browser prompt(s) return R done.","code":""},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"collection-content","dir":"Articles","previous_headings":"Discovering and navigating collections","what":"Collection content","title":"Getting Started","text":"collection presented directories files. Focus ‘HuBMAP Public’ collection. List content collection. 2308 records, corresponding HuBMAP dataset. Information dataset, e.g., dataset name 0008a49ac06f4afd886be81491a5a926 available HuBMAP data portal, using HuBMAPR package. (Usually, one ‘discover’ dataset name using data portal HuBMAPR, use rglobus explore content). List content dataset interest adding path globus_ls(), e.g., dataset consists files directories; explore content individual directories constructing appropriate path. Note last example functions rglobus designed support ‘piping’.","code":"hubmap <-     hubmap_collections |>     dplyr::filter(display_name == \"HuBMAP Public\") globus_ls(hubmap) ## # A tibble: 2,308 × 4 ##    name                             last_modified              size type  ##    <chr>                            <chr>                     <int> <chr> ##  1 0008a49ac06f4afd886be81491a5a926 2024-07-26 13:35:21+00:00  4096 dir   ##  2 0027cb59bcb4a34d5db83acaf934a9d9 2024-07-26 13:19:12+00:00  4096 dir   ##  3 002e9747855eef1e69452b39713a7592 2024-08-13 19:04:13+00:00  4096 dir   ##  4 00318be0b7cfa3c6ed7fbeab08fe700b 2024-07-26 12:58:42+00:00  4096 dir   ##  5 004d4f157df4ba07356cd805131dfc04 2024-08-13 19:21:04+00:00  4096 dir   ##  6 0066713ca95c03c52cb40f90ce8bbdb8 2024-04-17 23:24:41+00:00  4096 dir   ##  7 007ae59344e7df0e398204ee40155cb0 2024-04-17 23:18:56+00:00  4096 dir   ##  8 007f3dfaaa287d5c7c227651f61a9c5b 2024-07-26 14:46:55+00:00  4096 dir   ##  9 00cc71c7e1cddac60e794044079faeee 2024-07-26 14:17:08+00:00  4096 dir   ## 10 00d1a3623dac388773bc7780fcb42797 2024-04-17 23:02:27+00:00  4096 dir   ## # ℹ 2,298 more rows path <- \"0008a49ac06f4afd886be81491a5a926\" globus_ls(hubmap, path) ## # A tibble: 13 × 4 ##    name                last_modified                 size type  ##    <chr>               <chr>                        <int> <chr> ##  1 anndata-zarr        2021-11-21 09:40:50+00:00     4096 dir   ##  2 for-visualization   2021-11-21 09:41:41+00:00     4096 dir   ##  3 n5                  2021-11-21 09:35:26+00:00     4096 dir   ##  4 ometiff-pyramids    2021-11-21 09:35:26+00:00     4096 dir   ##  5 output_json         2021-11-21 09:39:13+00:00     4096 dir   ##  6 output_offsets      2021-11-21 09:37:00+00:00     4096 dir   ##  7 sprm_outputs        2021-11-21 09:15:36+00:00    12288 dir   ##  8 stitched            2021-11-21 04:44:53+00:00     4096 dir   ##  9 experiment.yaml     2021-11-21 04:32:41+00:00     1721 file  ## 10 metadata.json       2024-07-26 13:35:21+00:00    90481 file  ## 11 pipelineConfig.json 2021-11-21 04:58:21+00:00     5422 file  ## 12 session.log         2021-11-21 09:40:55+00:00 18699854 file  ## 13 symlinks.tar        2021-11-21 09:17:12+00:00   133120 file path <- paste(path, \"anndata-zarr\", sep = \"/\") globus_ls(hubmap, path) ## # A tibble: 1 × 4 ##   name                                   last_modified              size type  ##   <chr>                                  <chr>                     <int> <chr> ## 1 reg1_stitched_expressions-anndata.zarr 2021-11-21 09:40:52+00:00  4096 dir  path <- paste(path, \"reg1_stitched_expressions-anndata.zarr\", sep = \"/\") hubmap |> globus_ls(path) ## # A tibble: 5 × 4 ##   name   last_modified              size type  ##   <chr>  <chr>                     <int> <chr> ## 1 X      2021-11-21 09:40:51+00:00  4096 dir   ## 2 layers 2021-11-21 09:40:55+00:00  4096 dir   ## 3 obs    2021-11-21 09:40:52+00:00  4096 dir   ## 4 obsm   2021-11-21 09:40:52+00:00  4096 dir   ## 5 var    2021-11-21 09:40:52+00:00  4096 dir"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"local-collections","dir":"Articles","previous_headings":"Discovering and navigating collections","what":"Local collections","title":"Getting Started","text":"Globus provides software allow laptop appear collection. Follow Globus Connect Personal installation instructions operating system, launch application. identify location local disk act collection. macOS, created directory ~/tmp/HuBMAP, configured Globus Connect Personal share location. launching application (appears icon menu bar) selecting ‘Preferences’ using ‘-’ ‘+’ buttons select path local collection.  Collections owned appear collections(), convenience function my_collections() provides another way access . One aspect collection path root (starting /) relative user home directory needs specified. local connection ownership, possible , e.g., create directory; mkdir() returns updated directory listing enclosing folder. course used operating system create directory path local collection.","code":"my_collections <- my_collections() my_collections ## # A tibble: 1 × 2 ##   display_name    id                                   ##   <chr>           <chr>                                ## 1 Martin's HuBMAP 714ce2c4-3268-11ef-9629-453c3ae125a5 globus_ls(my_collections, \"/Users/ma38727/tmp\") ## # A tibble: 1 × 4 ##   name   last_modified              size type  ##   <chr>  <chr>                     <int> <chr> ## 1 HuBMAP 2024-08-14 17:53:20+00:00    96 dir  path <- \"tmp\" globus_ls(my_collections, path) ## # A tibble: 1 × 4 ##   name   last_modified              size type  ##   <chr>  <chr>                     <int> <chr> ## 1 HuBMAP 2024-08-14 17:53:20+00:00    96 dir  ## nothing here yet... path <- \"tmp/HuBMAP\" globus_ls(my_collections, path) ## # A tibble: 1 × 4 ##   name                             last_modified              size type  ##   <chr>                            <chr>                     <int> <chr> ## 1 d1dcab2df80590d8cd8770948abaf976 2024-08-14 17:53:20+00:00    96 dir mkdir(my_collections, \"tmp/HuBMAP/test\") ## # A tibble: 2 × 4 ##   name                             last_modified              size type  ##   <chr>                            <chr>                     <int> <chr> ## 1 d1dcab2df80590d8cd8770948abaf976 2024-08-14 17:53:20+00:00    96 dir   ## 2 test                             2024-08-14 17:53:27+00:00    64 dir"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"directory-and-file-transfer","dir":"Articles","previous_headings":"","what":"Directory and file transfer","title":"Getting Started","text":"Directory file transfer described Task Submission API. Start section ensuring HuBMAP collections illustrate directory file transfer specific HuBMAP dataset. dataset directory content","code":"hubmap <-     hubmap_collections |>     dplyr::filter(display_name == \"HuBMAP Public\") my_collections <- my_collections() hubmap_dataset <- \"d1dcab2df80590d8cd8770948abaf976\" globus_ls(hubmap, hubmap_dataset) ## # A tibble: 5 × 4 ##   name                                          last_modified         size type  ##   <chr>                                         <chr>                <int> <chr> ## 1 extras                                        2023-01-12 15:32:24…  4096 dir   ## 2 imzML                                         2023-01-04 17:56:12…  4096 dir   ## 3 ometiffs                                      2023-01-04 17:58:26…  4096 dir   ## 4 d1dcab2df80590d8cd8770948abaf976-metadata.tsv 2023-01-12 15:32:21…  1901 file  ## 5 metadata.json                                 2024-04-17 23:24:32… 34814 file"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"file-transfer","dir":"Articles","previous_headings":"Directory and file transfer","what":"File transfer","title":"Getting Started","text":"Use copy() transfer files directories collections. start metadata.json file, transfer ‘test’ directory local collection. Define source destination paths two collections. Globus anticipates large data transfers may involved, copy() operation actually submits task runs asynchronously. Globus confidence robustness file transfer, adopt ‘fire forget’ philosophy – task eventually succeed fail, perhaps overcoming intermittent network issues. ... optional arguments copy() arguments lower-level transfer() function. default, transfer tasks send email completion, check task progress respond appropriately. task can labeled, default label provided transfer_label(). anticipate code “Accepted”, indicating task sufficiently well-formatted added task queue.","code":"source_path <-     paste(hubmap_dataset, \"metadata.json\", sep = \"/\") destination_path <-     paste(\"tmp/HuBMAP/test\", basename(source_path), sep = \"/\") task <- copy(     hubmap, my_collections,        # collections     source_path, destination_path, # paths     notify_on_succeeded = FALSE ) task |>     dplyr::glimpse() ## Rows: 1 ## Columns: 3 ## $ submission_id <chr> \"1cec4f6f-5a66-11ef-a026-9921d9de2129\" ## $ task_id       <chr> \"1cec4f6e-5a66-11ef-a026-9921d9de2129\" ## $ code          <chr> \"Accepted\""},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"task-management","dir":"Articles","previous_headings":"Directory and file transfer","what":"Task management","title":"Getting Started","text":"Use task_status() check status. status column changes ACTIVE SUCCEEDED successful tasks. active task proceeding normally nice_status either Queued OK. active task may encountering errors, e.g., local connection offline (CONNECTION_FAILED) paused (GC_PAUSED) source destination file exists user permission read write (PERMISSION_DENIED). Perhaps unintuitively, Globus views errors transient (e.g., local collection may come back online) continues try complete task. Active tasks persist error state eventually fail. Failed tasks status FAILED. Let’s write simple loop check status, allowing task run 60 seconds. task successful, see file local collection. task failed still active nice_status reasons likely resolve, task can canceled. Actually, canceling completed task generates useful message without error.","code":"task_status(task) ## # A tibble: 1 × 5 ##   task_id                              type     status nice_status label         ##   <chr>                                <chr>    <chr>  <chr>       <chr>         ## 1 1cec4f6e-5a66-11ef-a026-9921d9de2129 TRANSFER ACTIVE Queued      2024-08-14 1… now <- Sys.time() repeat {     status <- task_status(task)$status     complete <- status %in% c(\"SUCCEEDED\", \"FAILED\")     if (complete || Sys.time() - now > 60)         break     Sys.sleep(5) } status ## [1] \"SUCCEEDED\" globus_ls(my_collections, \"tmp/HuBMAP/test\") ## # A tibble: 1 × 4 ##   name          last_modified              size type  ##   <chr>         <chr>                     <int> <chr> ## 1 metadata.json 2024-08-14 17:53:33+00:00 34814 file task_cancel(task) ## TaskComplete: The task completed before the cancel request was processed."},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"directory-transfer","dir":"Articles","previous_headings":"Directory and file transfer","what":"Directory transfer","title":"Getting Started","text":"Directory transfer similar. transfer entire HuBMAP dataset local collection. Specify source path HuBMAP dataset, destination path dataset id local collection. Submit task , add recursive = TRUE since directory. task may take quite complete, change default notify_on_succeeded option. Check initial status. task added queue, eventually entire content HuBMAP dataset transferred. One can gain additional insight progress task asking all_fields task status. Relevant fields number bytes transferred effective transfer rate. use helper function format values intelligibly. transfer can take time, interest brevity cancel task. Neglecting set recursive = TRUE results nice_status IS_A_DIRECTORY. Globus nonetheless continues try file transfer, recognize ‘user error’ cancel resubmit task.","code":"source_path <- hubmap_dataset destination_path <- paste(\"tmp/HuBMAP\", hubmap_dataset, sep = \"/\") task <- copy(     hubmap, my_collections,        # collections     source_path, destination_path, # paths     recursive = TRUE ) task_status(task) ## # A tibble: 1 × 5 ##   task_id                              type     status nice_status label         ##   <chr>                                <chr>    <chr>  <chr>       <chr>         ## 1 20cf8380-5a66-11ef-a026-9921d9de2129 TRANSFER ACTIVE Queued      2024-08-14 1… bytes_to_units <-     function(x) {     ## use R's 'object_size' S3 class to pretty-print bytes as MB, etc     x |>         structure(class = \"object_size\") |>         format(units = \"auto\") }  task_status(task, all_fields = TRUE) |>     dplyr::select(         status, nice_status,         bytes_transferred,         effective_bytes_per_second     ) |>     dplyr::mutate(         bytes_transferred = bytes_to_units(bytes_transferred),         effective_bytes_per_second =             bytes_to_units(effective_bytes_per_second)     ) ##   status nice_status bytes_transferred effective_bytes_per_second ##   <chr>  <chr>       <chr>             <chr> ## 1 ACTIVE OK          227.8 Mb          486.9 Kb task_cancel(task) ## Canceled: The task has been cancelled successfully. task <- copy(     hubmap, my_collections, # collections     source_path,     destination_path ) ## ... task_status(task) ## # A tibble: 1 × 5 ##   task_id                              type     status nice_status    label ##   <chr>                                <chr>    <chr>  <chr>          <chr> ## 1 36bee1e6-5a5b-11ef-be9a-83cd94efb466 TRANSFER ACTIVE IS_A_DIRECTORY 2024-08-1…  ## Oops, forgot the `recursive = TRUE` option task_cancel(task) task <- copy(     hubmap, my_collections, # collections     source_path,     destination_path,     recursive = TRUE )"},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"complicated-transfer-tasks","dir":"Articles","previous_headings":"Directory and file transfer","what":"Complicated transfer tasks","title":"Getting Started","text":"Globus supports complicated tasks, instance submitting multiple transfer tasks , synchronizing two locations. developed subsequent iterations package.","code":""},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Getting Started","text":"vignette compiled using following software versions","code":"sessionInfo() ## R version 4.4.1 Patched (2024-06-20 r86819) ## Platform: aarch64-apple-darwin23.5.0 ## Running under: macOS Sonoma 14.5 ##  ## Matrix products: default ## BLAS:   /Users/ma38727/bin/R-4-4-branch/lib/libRblas.dylib  ## LAPACK: /Users/ma38727/bin/R-4-4-branch/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] rglobus_0.0.0.9003 ##  ## loaded via a namespace (and not attached): ##  [1] jsonlite_1.8.8    dplyr_1.1.4       compiler_4.4.1    promises_1.3.0    ##  [5] Rcpp_1.0.13       tidyselect_1.2.1  later_1.3.2       jquerylib_0.1.4   ##  [9] systemfonts_1.1.0 textshaping_0.4.0 yaml_2.3.10       fastmap_1.2.0     ## [13] R6_2.5.1          rjsoncons_1.3.1   generics_0.1.3    curl_5.2.1        ## [17] httr2_1.0.2       knitr_1.48        htmlwidgets_1.6.4 tibble_3.2.1      ## [21] desc_1.4.3        openssl_2.2.0     bslib_0.7.0       pillar_1.9.0      ## [25] rlang_1.1.4       utf8_1.2.4        cachem_1.1.0      httpuv_1.6.15     ## [29] xfun_0.46         fs_1.6.4          sass_0.4.9        cli_3.6.3         ## [33] withr_3.0.1       pkgdown_2.1.0     magrittr_2.0.3    digest_0.6.36     ## [37] askpass_1.2.0     rappdirs_0.3.3    lifecycle_1.0.4   vctrs_0.6.5       ## [41] evaluate_0.24.0   glue_1.7.0        whisker_0.4.1     ragg_1.3.2        ## [45] fansi_1.0.6       rmarkdown_2.27    tools_4.4.1       pkgconfig_2.0.3   ## [49] htmltools_0.5.8.1"},{"path":"https://mtmorgan.github.io/rglobus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/rglobus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2024). rglobus: Manage 'Globus' File Transfer Services. R package version 0.0.0.9003, https://mtmorgan.github.io/rglobus/.","code":"@Manual{,   title = {rglobus: Manage 'Globus' File Transfer Services},   author = {Martin Morgan},   year = {2024},   note = {R package version 0.0.0.9003},   url = {https://mtmorgan.github.io/rglobus/}, }"},{"path":"https://mtmorgan.github.io/rglobus/index.html","id":"rglobus","dir":"","previous_headings":"","what":"Manage Globus File Transfer Services","title":"Manage Globus File Transfer Services","text":"‘Globus’ cloud-based file transfer service, available https://www.globus.org/. package provides ‘R’ client ability discover navigate file collections, transfer files directories collections. Use package illustrated data ‘HuBMAP’ https://portal.hubmapconsortium.org/ data portal ‘HuBMAPR’ package.","code":""},{"path":"https://mtmorgan.github.io/rglobus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manage Globus File Transfer Services","text":"Install rglobus GitHub : See getting started vignette introduction configuration use.","code":"if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rglobus\")"},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Collections, directories, and files — collections","title":"Collections, directories, and files — collections","text":"collections() returns collections available user. my_collections() convenience function identify collections belonging current user. globus_ls() lists content collection. mkdir() creates directory collection.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Collections, directories, and files — collections","text":"","code":"collections(   filter_fulltext = \"\",   filter_scope = \"all\",   ...,   all_fields = FALSE )  my_collections(filter_fulltext = \"\", ...)  globus_ls(   .data,   path = \"\",   show_hidden = FALSE,   filters = character(),   all_fields = FALSE )  mkdir(.data, path)"},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Collections, directories, and files — collections","text":"filter_fulltext character() filter applied fields associated collections, including display name, description, user, etc. filter_fulltext required filter_scope = \"\". filter_scope character(1) scope search, e.g., \"\" \"-endpoints\". See details. ... additional, less-common parameters influencing search. See details. all_fields logical(1) indicating whether abbreviated full listing returned. .data tibble single row, containing column id identifying collection, returned collections() my_collections(). path character(1) location collection listing directory creation. show_hidden logical(1) controls inclusion 'hidden' (starting '.') files return value globus_ls(). filters character() filter terms. See details.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Collections, directories, and files — collections","text":"collections() my_collections() return tibble containing columns display_name (collection / endpoint) id. Additional fields returned all_fields = TRUE described https://docs.globus.org/api/transfer/endpoints_and_collections/#endpoint_or_collection_fields. globus_ls() returns tibble name, last modified, size, type (directory file) entry. Additional fields returned all_fields = TRUE, described https://docs.globus.org/api/transfer/file_operations/#file_document mkdir() returns tibble directory listing enclosing directory.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Collections, directories, and files — collections","text":"filter_fulltext follows rules defined https://docs.globus.org/api/transfer/endpoint_and_collection_search/#endpoint_search Approximately, word treated separate term matched prefix search fields. Thus \"Public HuBMAP\" matches collection mentioning \"Public\" \"HuBMAP\", appearing order, e.g., \"HuBMAP Public\", \"HuBMAP Dev Public\", etc. filter_scope can take values described https://docs.globus.org/api/transfer/endpoint_and_collection_search/#search_scope ... arguments collections() my_collections() described https://docs.globus.org/api/transfer/endpoint_and_collection_search/#query_parameters 'offset' 'limit' used internally. used 'Globus Connect Personal' (used enable transfer local computer), path either full path user system (starting /, e.g., /Users/mtmorgan/HuBMAP) relative user home directory (starting without /, e.g., '~/HuBMAP'). filters globus_ls() described https://docs.globus.org/api/transfer/file_operations/#dir_listing_filtering Elements filters treated '' operations, thus filters = \"name:~*.csv/size:<200\" finds csv files smaller 200 bytes, whereas filters = #' c(\"name:~*.csv\", \"size:<200\") finds csv files size, file smaller 200 bytes. mkdir() creates directory elements recursively.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Collections, directories, and files — collections","text":"","code":"## ## collections ##  collections <- collections(\"HuBMAP Public\")  # 'AND' words or elements collections #> # A tibble: 4 × 2 #>   display_name        id                                   #>   <chr>               <chr>                                #> 1 HuBMAP Public       af603d86-eab9-4eec-bb1d-9d26556741bb #> 2 HuBMAP Dev Public   2b82f085-1d50-4c93-897e-cd79d77481ed #> 3 HuBMAP Stage Public 4b383482-8c5c-48fb-8b80-a450338ca383 #> 4 HuBMAP Test Public  1e12c423-dd17-4095-a9f8-12555ee83345  hubmap <-     collections |>     dplyr::filter(display_name == \"HuBMAP Public\")  my_collection <- my_collections() my_collection #> # A tibble: 1 × 2 #>   display_name    id                                   #>   <chr>           <chr>                                #> 1 Martin's HuBMAP 714ce2c4-3268-11ef-9629-453c3ae125a5  ## ## Directories and files ##  globus_ls(hubmap)    # same as `hubmap |> globus_ls()` #> # A tibble: 2,308 × 4 #>    name                             last_modified              size type  #>    <chr>                            <chr>                     <int> <chr> #>  1 0008a49ac06f4afd886be81491a5a926 2024-07-26 13:35:21+00:00  4096 dir   #>  2 0027cb59bcb4a34d5db83acaf934a9d9 2024-07-26 13:19:12+00:00  4096 dir   #>  3 002e9747855eef1e69452b39713a7592 2024-08-13 19:04:13+00:00  4096 dir   #>  4 00318be0b7cfa3c6ed7fbeab08fe700b 2024-07-26 12:58:42+00:00  4096 dir   #>  5 004d4f157df4ba07356cd805131dfc04 2024-08-13 19:21:04+00:00  4096 dir   #>  6 0066713ca95c03c52cb40f90ce8bbdb8 2024-04-17 23:24:41+00:00  4096 dir   #>  7 007ae59344e7df0e398204ee40155cb0 2024-04-17 23:18:56+00:00  4096 dir   #>  8 007f3dfaaa287d5c7c227651f61a9c5b 2024-07-26 14:46:55+00:00  4096 dir   #>  9 00cc71c7e1cddac60e794044079faeee 2024-07-26 14:17:08+00:00  4096 dir   #> 10 00d1a3623dac388773bc7780fcb42797 2024-04-17 23:02:27+00:00  4096 dir   #> # ℹ 2,298 more rows  ## hierarchical traversal hubmap |>     globus_ls(\"0008a49ac06f4afd886be81491a5a926/sprm_outputs\") #> # A tibble: 84 × 4 #>    name                                               last_modified   size type  #>    <chr>                                              <chr>          <int> <chr> #>  1 out.hdf5                                           2021-11-21 0… 4.46e8 file  #>  2 reg1_stitched_expressions.ome.tiff-Cluster_Shape.… 2021-11-21 0… 6.58e6 file  #>  3 reg1_stitched_expressions.ome.tiff-SNR.csv         2021-11-21 0… 4.85e2 file  #>  4 reg1_stitched_expressions.ome.tiff-SPRM_Image_Qua… 2021-11-21 0… 5.72e3 file  #>  5 reg1_stitched_expressions.ome.tiff-Superpixels.png 2021-11-21 0… 6.01e6 file  #>  6 reg1_stitched_expressions.ome.tiff-Top3ChannelPCA… 2021-11-21 0… 5.29e7 file  #>  7 reg1_stitched_expressions.ome.tiff-cell_1_texture… 2021-11-21 0… 2.10e7 file  #>  8 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 1.38e8 file  #>  9 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 1.30e7 file  #> 10 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 4.62e6 file  #> # ℹ 74 more rows  ## filter files with name ending in 'csv', and with size < 200 hubmap |>     globus_ls(         \"0008a49ac06f4afd886be81491a5a926/sprm_outputs\",         filters = \"name:~*.csv/size:<200\"     ) #> # A tibble: 7 × 4 #>   name                                                 last_modified  size type  #>   <chr>                                                <chr>         <int> <chr> #> 1 reg1_stitched_expressions.ome.tiff-clustercell_boun… 2021-11-21 0…   196 file  #> 2 reg1_stitched_expressions.ome.tiff-clustercell_mean… 2021-11-21 0…   197 file  #> 3 reg1_stitched_expressions.ome.tiff-clustercell_tSNE… 2021-11-21 0…   110 file  #> 4 reg1_stitched_expressions.ome.tiff-clustercell_text… 2021-11-21 0…    36 file  #> 5 reg1_stitched_expressions.ome.tiff-clustercell_tota… 2021-11-21 0…   196 file  #> 6 reg1_stitched_expressions.ome.tiff-clusternuclei_to… 2021-11-21 0…   190 file  #> 7 reg1_stitched_expressions.ome.tiff-clusternucleus_b… 2021-11-21 0…   193 file   ## filter files ending in 'json', or with size > 100000000 hubmap |>     globus_ls(         \"0008a49ac06f4afd886be81491a5a926/sprm_outputs\",         filters = c(\"name:~*.json\", \"size:>100000000\")     ) #> # A tibble: 8 × 4 #>   name                                                last_modified   size type  #>   <chr>                                               <chr>          <int> <chr> #> 1 out.hdf5                                            2021-11-21 0… 4.46e8 file  #> 2 reg1_stitched_expressions.ome.tiff-SPRM_Image_Qual… 2021-11-21 0… 5.72e3 file  #> 3 reg1_stitched_expressions.ome.tiff-cell_boundaries… 2021-11-21 0… 1.38e8 file  #> 4 reg1_stitched_expressions.ome.tiff-cell_channel_co… 2021-11-21 0… 1.45e8 file  #> 5 reg1_stitched_expressions.ome.tiff-cell_polygons_s… 2021-11-21 0… 1.30e8 file  #> 6 reg1_stitched_expressions.ome.tiff-cell_shape.csv   2021-11-21 0… 1.55e8 file  #> 7 reg1_stitched_expressions.ome.tiff-nuclei_channel_… 2021-11-21 0… 1.14e8 file  #> 8 reg1_stitched_expressions.ome.tiff-nucleus_boundar… 2021-11-21 0… 1.09e8 file   if (FALSE) { # \\dontrun{ mkdir(my_collection, \"tmp/HuBMAP/test\") } # }"},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":null,"dir":"Reference","previous_headings":"","what":"Task management — task_status","title":"Task management — task_status","text":"task_status() retrieves status task started copy() transfer(). task_cancel() cancels task started copy() transfer(). task_list() retrieves information tasks submitted user.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Task management — task_status","text":"","code":"task_status(.data, all_fields = FALSE)  task_cancel(.data)  task_list(filter = \"\", orderby = \"request_time DESC\", all_fields = FALSE)"},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Task management — task_status","text":".data tibble column task_id, returned copy() transfer(). all_fields logical(1) indicating whether abbreviated detailed information task status returned filter character(1) query parameter restricting tasks returned task_list(). See details. orderby character(1) task list ordering; default places recently requested task top.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Task management — task_status","text":"task_status() task_list() return tibble summarizing status task(s). meaning column described Globus documentation https://docs.globus.org/api/transfer/task/#task_document default value all_fields = FALSE, tibble) contains columns task_id: id task. type: one TRANSFER DELETE. status: one ACTIVE, INACTIVE, SUCCEEDED FAILED. nice_status: NULL completed task; OK Queued tasks proceeding normally; indication reason ACTIVE INACTIVE errors. Examples nice_status indicating transient failure include: PERMISSION_DENIED user currently access source destination resource; CONNECT_FAILED Globus Connect Personal client currently -line; GC_PAUSED client paused. task_cancel() returns input argument, invisibly.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Task management — task_status","text":"input task_status() usually return value copy() transfer(). task_cancel() prints message indicating successful submission task cancellation operation. task_list(), filter orderby syntax described https://docs.globus.org/api/transfer/task/#filter_and_order_by_options simple task list filter return 'ACTIVE' tasks, filter = \"status:ACTIVE\".","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/task.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Task management — task_status","text":"","code":"if (exists(\"task\")) {     ## check transfer task status     task_status <- task_status(task)     print(task_status)      ## tasks that are failing need to be cancelled     status <- pull(task_status, \"status\")     nice_status <- pull(task_status, \"nice_status\")     cancel <-         ## task has failed, or...         identical(status, \"FAILED\") ||         ## ...something's gone wrong         (!is.null(nice_status) && !nice_status %in% c(\"OK\", \"Queued\"))     if (cancel)         task_cancel(task) } #> # A tibble: 1 × 5 #>   task_id                              type     status    nice_status label      #>   <chr>                                <chr>    <chr>     <lgl>       <chr>      #> 1 e388940c-5a5c-11ef-be9a-83cd94efb466 TRANSFER SUCCEEDED NA          2024-08-1… #> Error in pull(task_status, \"status\"): could not find function \"pull\"  task_list() #> # A tibble: 44 × 5 #>    task_id                              type     status    nice_status label     #>    <chr>                                <chr>    <chr>     <lgl>       <chr>     #>  1 9d53aa4a-5a65-11ef-9081-a128da25f366 TRANSFER FAILED    NA          2024-08-… #>  2 997b6890-5a65-11ef-9081-a128da25f366 TRANSFER SUCCEEDED NA          2024-08-… #>  3 9275af58-5a65-11ef-a026-9921d9de2129 TRANSFER SUCCEEDED NA          2024-08-… #>  4 597817ac-5a65-11ef-be9a-83cd94efb466 TRANSFER SUCCEEDED NA          2024-08-… #>  5 1de1a6c3-5a65-11ef-9081-a128da25f366 TRANSFER SUCCEEDED NA          2024-08-… #>  6 184e38e2-5a65-11ef-a026-9921d9de2129 TRANSFER SUCCEEDED NA          2024-08-… #>  7 e03327b0-5a64-11ef-be9a-83cd94efb466 TRANSFER SUCCEEDED NA          2024-08-… #>  8 e388940c-5a5c-11ef-be9a-83cd94efb466 TRANSFER SUCCEEDED NA          2024-08-… #>  9 95e38528-5a5b-11ef-be9a-83cd94efb466 TRANSFER FAILED    NA          2024-08-… #> 10 36bee1e6-5a5b-11ef-be9a-83cd94efb466 TRANSFER FAILED    NA          2024-08-… #> # ℹ 34 more rows"},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"File and directory transfer — copy","title":"File and directory transfer — copy","text":"copy() copies files directories (perhaps recursively) one collection another. transfer() transfer_item() lower-level functions allow one files directories, including symbolic links, transferred single task. transfer_item() constructs JSON description single transfer, e.g., source file destination file. used input transfer(). transfer_label() helper function provide identifying label task, visible instance Globus web application.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"File and directory transfer — copy","text":"","code":"copy(   source,   destination,   source_path = \"\",   destination_path = \"\",   recursive = FALSE,   ... )  transfer(   source,   destination,   transfer_items,   label = transfer_label(),   notify_on_succeeded = TRUE,   notify_on_failed = TRUE,   encrypt_data = FALSE,   verify_checksum = FALSE,   preserve_timestamp = FALSE,   delete_destination_extra = FALSE,   skip_source_errors = FALSE,   fail_on_quota_errors = FALSE,   filter_rules = NULL,   sync_level = NULL )  transfer_item(source_path, destination_path, recursive)  transfer_label()"},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"File and directory transfer — copy","text":"source tibble containing single row column id, unique identifier source collection. destination tibble containing single row column id, unique identifier destination collection. source_path character(1) path source collection root directory file copied. destination_path character(1) path destination collection root location directory file copied. recursive logical(1) TRUE source_path directory, copy directory content recursively destination_path. recursive = TRUE error source file. ... additional arguments passed copy() transfer(). transfer_items character() transfer_item() symlink_item() objects. label character(1) identifier task. notify_on_succeeded logical(1), see https://docs.globus.org/api/transfer/task_submit/#transfer_specific_fields. notify_on_failed logical(1). encrypt_data logical(1). verify_checksum logical(1). preserve_timestamp logical(1). delete_destination_extra logical(1). skip_source_errors logical(1). fail_on_quota_errors logical(1) filter_rules implemented. sync_level implemented.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"File and directory transfer — copy","text":"copy() transfer() return tibble columns submission_id, task_id code. code one 'Accepted' (task queued execution) Duplicate (task re-submission existing task). Use return value check cancel task task_status() task_cancel(). transfer_label() returns character(1) label including date, time, user information, suffix rglobus-transfer.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"File and directory transfer — copy","text":"copy() implements common task copying files folders collections. transfer() allows specification multiple transfer operations single task. copy() transfer() submit task initiate transaction, necessary check status task task_status(). also necessary manually cancel tasks fail task_cancel(). Globus documentation, https://docs.globus.org/api/transfer/task_submit/#document_types sections 2.2, 2.3, 2.4 describe options relevant copying directories files. https://docs.globus.org/api/transfer/task_submit/#errors describes errors task submission.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"File and directory transfer — copy","text":"","code":"my_collection <- my_collections() hubmap <-     collections(\"HuBMAP Public\") |>     dplyr::filter(display_name == \"HuBMAP Public\")  ## ## File and directory copying ##  ## HubMAP dataset id, from HuBMAPR::datasets() dataset_id <- \"d1dcab2df80590d8cd8770948abaf976\" globus_ls(hubmap, dataset_id) #> # A tibble: 5 × 4 #>   name                                          last_modified         size type  #>   <chr>                                         <chr>                <int> <chr> #> 1 extras                                        2023-01-12 15:32:24…  4096 dir   #> 2 imzML                                         2023-01-04 17:56:12…  4096 dir   #> 3 ometiffs                                      2023-01-04 17:58:26…  4096 dir   #> 4 d1dcab2df80590d8cd8770948abaf976-metadata.tsv 2023-01-12 15:32:21…  1901 file  #> 5 metadata.json                                 2024-04-17 23:24:32… 34814 file   ## copy file from HuBMAP dataset to `my_collection` source_path <- paste0(dataset_id, \"/metadata.json\") destination_path <- paste0(\"tmp/HuBMAP/\", source_path) task <- copy(     hubmap, my_collection,     source_path, destination_path,     notify_on_succeeded = FALSE ) task #> # A tibble: 1 × 3 #>   submission_id                        task_id                             code  #>   <chr>                                <chr>                               <chr> #> 1 1625ca67-5a66-11ef-be9a-83cd94efb466 1625ca66-5a66-11ef-be9a-83cd94efb4… Acce…  task_status(task) #> # A tibble: 1 × 5 #>   task_id                              type     status nice_status label         #>   <chr>                                <chr>    <chr>  <chr>       <chr>         #> 1 1625ca66-5a66-11ef-be9a-83cd94efb466 TRANSFER ACTIVE Queued      2024-08-14 1…  ## default task label transfer_label() #> [1] \"2024-08-14 13:53:17-0400 ma38727 rglobus-transfer\""}]
