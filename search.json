[{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"introduction-installation","dir":"Articles","previous_headings":"","what":"Introduction & installation","title":"Getting Started","text":"Install package necessary Attach package R session","code":"if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rglobus\") library(rglobus)"},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":[]},{"path":"https://mtmorgan.github.io/rglobus/articles/a_getting_started.html","id":"session-information","dir":"Articles","previous_headings":"","what":"Session information","title":"Getting Started","text":"vignette compiled using following software versions","code":"sessionInfo() ## R version 4.4.1 Patched (2024-06-20 r86819) ## Platform: aarch64-apple-darwin23.5.0 ## Running under: macOS Sonoma 14.5 ##  ## Matrix products: default ## BLAS:   /Users/ma38727/bin/R-4-4-branch/lib/libRblas.dylib  ## LAPACK: /Users/ma38727/bin/R-4-4-branch/lib/libRlapack.dylib;  LAPACK version 3.12.0 ##  ## locale: ## [1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8 ##  ## time zone: America/New_York ## tzcode source: internal ##  ## attached base packages: ## [1] stats     graphics  grDevices utils     datasets  methods   base      ##  ## other attached packages: ## [1] rglobus_0.0.0.9000 ##  ## loaded via a namespace (and not attached): ##  [1] vctrs_0.6.5       cli_3.6.3         knitr_1.48        rlang_1.1.4       ##  [5] xfun_0.46         generics_0.1.3    textshaping_0.4.0 jsonlite_1.8.8    ##  [9] glue_1.7.0        rjsoncons_1.3.1   htmltools_0.5.8.1 ragg_1.3.2        ## [13] sass_0.4.9        rappdirs_0.3.3    fansi_1.0.6       rmarkdown_2.27    ## [17] tibble_3.2.1      evaluate_0.24.0   jquerylib_0.1.4   fastmap_1.2.0     ## [21] yaml_2.3.10       lifecycle_1.0.4   httr2_1.0.2       whisker_0.4.1     ## [25] compiler_4.4.1    dplyr_1.1.4       fs_1.6.4          pkgconfig_2.0.3   ## [29] htmlwidgets_1.6.4 systemfonts_1.1.0 digest_0.6.36     R6_2.5.1          ## [33] tidyselect_1.2.1  utf8_1.2.4        pillar_1.9.0      magrittr_2.0.3    ## [37] bslib_0.7.0       tools_4.4.1       pkgdown_2.1.0     cachem_1.1.0      ## [41] desc_1.4.3"},{"path":"https://mtmorgan.github.io/rglobus/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Martin Morgan. Author, maintainer.","code":""},{"path":"https://mtmorgan.github.io/rglobus/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Morgan M (2024). rglobus: Manage 'Globus' File Transfer Services. R package version 0.0.0.9000, https://mtmorgan.github.io/rglobus/.","code":"@Manual{,   title = {rglobus: Manage 'Globus' File Transfer Services},   author = {Martin Morgan},   year = {2024},   note = {R package version 0.0.0.9000},   url = {https://mtmorgan.github.io/rglobus/}, }"},{"path":"https://mtmorgan.github.io/rglobus/index.html","id":"rglobus","dir":"","previous_headings":"","what":"Manage Globus File Transfer Services","title":"Manage Globus File Transfer Services","text":"‘Globus’ cloud-based file transfer service, available https://www.globus.org/. package provides ‘R’ client ability discover navigate file collections, transfer files directories collections. Use package illustrated data ‘HuBMAP’ https://portal.hubmapconsortium.org/ data portal ‘HuBMAPR’ package.","code":""},{"path":"https://mtmorgan.github.io/rglobus/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Manage Globus File Transfer Services","text":"Install rglobus GitHub : See getting started vignette introduction configuration use.","code":"if (!requireNamespace(\"remotes\", quiety = TRUE))     install.packages(\"remotes\", repos = \"https://CRAN.R-project.org\") remotes::install_github(\"mtmorgan/rglobus\")"},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":null,"dir":"Reference","previous_headings":"","what":"Globus collections, directories, and files — collections","title":"Globus collections, directories, and files — collections","text":"Globus collections, directories, files","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Globus collections, directories, and files — collections","text":"","code":"collections(filter_fulltext, filter_scope = \"all\", ..., all_fields = FALSE)  my_collections(filter_fulltext = \"\", ...)  globus_ls(   .data,   path = \"\",   show_hidden = FALSE,   filters = character(),   all_fields = FALSE )  mkdir(.data, path)"},{"path":"https://mtmorgan.github.io/rglobus/reference/collections.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Globus collections, directories, and files — collections","text":"","code":"## ## collections ##  collections <- collections(\"HuBMAP Public\")  # '&' words or elements collections #> # A tibble: 4 × 2 #>   display_name        id                                   #>   <chr>               <chr>                                #> 1 HuBMAP Public       af603d86-eab9-4eec-bb1d-9d26556741bb #> 2 HuBMAP Dev Public   2b82f085-1d50-4c93-897e-cd79d77481ed #> 3 HuBMAP Stage Public 4b383482-8c5c-48fb-8b80-a450338ca383 #> 4 HuBMAP Test Public  1e12c423-dd17-4095-a9f8-12555ee83345  hubmap <-     collections |>     dplyr::filter(display_name == \"HuBMAP Public\")  my_collection <- my_collections()  ## ## Directories and files ##  globus_ls(hubmap)    # same as `hubmap |> globus_ls()` #> # A tibble: 2,170 × 4 #>    name                             last_modified              size type  #>    <chr>                            <chr>                     <int> <chr> #>  1 0008a49ac06f4afd886be81491a5a926 2024-07-26 13:35:21+00:00  4096 dir   #>  2 0027cb59bcb4a34d5db83acaf934a9d9 2024-07-26 13:19:12+00:00  4096 dir   #>  3 00318be0b7cfa3c6ed7fbeab08fe700b 2024-07-26 12:58:42+00:00  4096 dir   #>  4 0066713ca95c03c52cb40f90ce8bbdb8 2024-04-17 23:24:41+00:00  4096 dir   #>  5 007ae59344e7df0e398204ee40155cb0 2024-04-17 23:18:56+00:00  4096 dir   #>  6 007f3dfaaa287d5c7c227651f61a9c5b 2024-07-26 14:46:55+00:00  4096 dir   #>  7 00cc71c7e1cddac60e794044079faeee 2024-07-26 14:17:08+00:00  4096 dir   #>  8 00d1a3623dac388773bc7780fcb42797 2024-04-17 23:02:27+00:00  4096 dir   #>  9 00e256274c3dd0976313a73df36880f4 2023-12-18 01:16:23+00:00  4096 dir   #> 10 00f1ce42073a3dc6c442e9105f4e4f61 2024-07-26 13:27:30+00:00  4096 dir   #> # ℹ 2,160 more rows  ## hierarchical traversal hubmap |>     globus_ls(\"0008a49ac06f4afd886be81491a5a926/sprm_outputs\") #> # A tibble: 84 × 4 #>    name                                               last_modified   size type  #>    <chr>                                              <chr>          <int> <chr> #>  1 out.hdf5                                           2021-11-21 0… 4.46e8 file  #>  2 reg1_stitched_expressions.ome.tiff-Cluster_Shape.… 2021-11-21 0… 6.58e6 file  #>  3 reg1_stitched_expressions.ome.tiff-SNR.csv         2021-11-21 0… 4.85e2 file  #>  4 reg1_stitched_expressions.ome.tiff-SPRM_Image_Qua… 2021-11-21 0… 5.72e3 file  #>  5 reg1_stitched_expressions.ome.tiff-Superpixels.png 2021-11-21 0… 6.01e6 file  #>  6 reg1_stitched_expressions.ome.tiff-Top3ChannelPCA… 2021-11-21 0… 5.29e7 file  #>  7 reg1_stitched_expressions.ome.tiff-cell_1_texture… 2021-11-21 0… 2.10e7 file  #>  8 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 1.38e8 file  #>  9 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 1.30e7 file  #> 10 reg1_stitched_expressions.ome.tiff-cell_boundarie… 2021-11-21 0… 4.62e6 file  #> # ℹ 74 more rows  ## filter files with name ending in 'csv', and with size < 1000 hubmap |>     globus_ls(         \"0008a49ac06f4afd886be81491a5a926/sprm_outputs\",         filters = \"name:~*.csv/size:<1000\"     ) #> # A tibble: 18 × 4 #>    name                                                last_modified  size type  #>    <chr>                                               <chr>         <int> <chr> #>  1 reg1_stitched_expressions.ome.tiff-SNR.csv          2021-11-21 0…   485 file  #>  2 reg1_stitched_expressions.ome.tiff-channelPCA_summ… 2021-11-21 0…   806 file  #>  3 reg1_stitched_expressions.ome.tiff-cluster_meanALL… 2021-11-21 0…   201 file  #>  4 reg1_stitched_expressions.ome.tiff-clustercell_bou… 2021-11-21 0…   286 file  #>  5 reg1_stitched_expressions.ome.tiff-clustercell_bou… 2021-11-21 0…   200 file  #>  6 reg1_stitched_expressions.ome.tiff-clustercell_bou… 2021-11-21 0…   196 file  #>  7 reg1_stitched_expressions.ome.tiff-clustercell_cel… 2021-11-21 0…   225 file  #>  8 reg1_stitched_expressions.ome.tiff-clustercell_cov… 2021-11-21 0…   289 file  #>  9 reg1_stitched_expressions.ome.tiff-clustercell_mea… 2021-11-21 0…   197 file  #> 10 reg1_stitched_expressions.ome.tiff-clustercell_tSN… 2021-11-21 0…   110 file  #> 11 reg1_stitched_expressions.ome.tiff-clustercell_tex… 2021-11-21 0…    36 file  #> 12 reg1_stitched_expressions.ome.tiff-clustercell_tot… 2021-11-21 0…   196 file  #> 13 reg1_stitched_expressions.ome.tiff-clusternuclei_c… 2021-11-21 0…   358 file  #> 14 reg1_stitched_expressions.ome.tiff-clusternuclei_m… 2021-11-21 0…   201 file  #> 15 reg1_stitched_expressions.ome.tiff-clusternuclei_t… 2021-11-21 0…   190 file  #> 16 reg1_stitched_expressions.ome.tiff-clusternucleus_… 2021-11-21 0…   349 file  #> 17 reg1_stitched_expressions.ome.tiff-clusternucleus_… 2021-11-21 0…   200 file  #> 18 reg1_stitched_expressions.ome.tiff-clusternucleus_… 2021-11-21 0…   193 file   ## filter files ending in 'json', or with size > 100000000 hubmap |>     globus_ls(         \"0008a49ac06f4afd886be81491a5a926/sprm_outputs\",         filters = c(\"name:~*.json\", \"size:>100000000\")     ) #> # A tibble: 8 × 4 #>   name                                                last_modified   size type  #>   <chr>                                               <chr>          <int> <chr> #> 1 out.hdf5                                            2021-11-21 0… 4.46e8 file  #> 2 reg1_stitched_expressions.ome.tiff-SPRM_Image_Qual… 2021-11-21 0… 5.72e3 file  #> 3 reg1_stitched_expressions.ome.tiff-cell_boundaries… 2021-11-21 0… 1.38e8 file  #> 4 reg1_stitched_expressions.ome.tiff-cell_channel_co… 2021-11-21 0… 1.45e8 file  #> 5 reg1_stitched_expressions.ome.tiff-cell_polygons_s… 2021-11-21 0… 1.30e8 file  #> 6 reg1_stitched_expressions.ome.tiff-cell_shape.csv   2021-11-21 0… 1.55e8 file  #> 7 reg1_stitched_expressions.ome.tiff-nuclei_channel_… 2021-11-21 0… 1.14e8 file  #> 8 reg1_stitched_expressions.ome.tiff-nucleus_boundar… 2021-11-21 0… 1.09e8 file   if (FALSE) { # \\dontrun{ mkdir(my_collection, \"tmp/HuBMAP/test\") } # }"},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":null,"dir":"Reference","previous_headings":"","what":"Globus file and directory transfer — copy","title":"Globus file and directory transfer — copy","text":"copy() copies files directories (perhaps recursively) one collection another. transfer() transfer_item() lower-level functions allow one files directories, including symbolic links, transfered single task. transfer_item() constructs JSON description single transfer, e.g., source file destination file. used input transfer(). transfer_label() helper function provide identifying label task, visible instance Globus web application. task_status() retrieves status task started copy() transfer(). task_cancel() cancels task started copy() transfer().","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Globus file and directory transfer — copy","text":"","code":"copy(   source,   destination,   source_path = \"\",   destination_path = \"\",   recursive = FALSE,   ... )  transfer(   source,   destination,   transfer_items,   label = transfer_label(),   notify_on_succeeded = TRUE,   notify_on_failed = TRUE,   encrypt_data = FALSE,   verify_checksum = FALSE,   preserve_timestamp = FALSE,   delete_destination_extra = FALSE,   skip_source_errors = FALSE,   fail_on_quota_errors = FALSE,   filter_rules = NULL,   sync_level = NULL )  transfer_item(source_path, destination_path, recursive)  transfer_label()  task_status(.data, all_fields = FALSE)  task_cancel(.data)"},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Globus file and directory transfer — copy","text":"source tibble containing single row column id, unique identifier source collection. destination tibble containing single row column id, unique identifier destination collection. source_path character(1) path source collection root directory file copied. destination_path character(1) path destination collection root location directory file copied. recursive logical(1) TRUE source_path directory, copy directory content recursively destination_path. recursive = TRUE error source file. ... additional arguments passed copy() transfer(). transfer_items character() transfer_item() symlink_item() objects. label character(1) identifier task. notify_on_succeeded logical(1), see https://docs.globus.org/api/transfer/task_submit/#transfer_specific_fields. notify_on_failed logical(1). encrypt_data logical(1). verify_checksum logical(1). preserve_timestamp logical(1). delete_destination_extra logical(1). skip_source_errors logical(1). fail_on_quota_errors logical(1) filter_rules implemented. sync_level implemented. .data tibble column task_id, returned copy() transfer(). all_fields logical(1) indicating whether abbreviated detailed information task status returned","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Globus file and directory transfer — copy","text":"copy() transfer() return tibble columns submission_id, task_id code. code one 'Accepted' (task queued execution) Duplicate (task re-submission existing task). Use return value check cancel task task_status() task_cancel(). transfer_label() returns character(1) label including date, time, user information, suffix 'r-globus-transfer'. task_status() returns tibble summarizing status task. meaning column described Globus documentation https://docs.globus.org/api/transfer/task/#task_document default value all_fields = FALSE, tibble contains three columns status: one 'ACTIVE', 'INACTIVE', 'SUCCEEDED' 'FAILED' nice_status: either NULL , failing task, indication reason failure, e.g., 'PERMISSION_DENIED'. task_id: id task. task_cancel() returns input argument, invisibly.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"details","dir":"Reference","previous_headings":"","what":"Details","title":"Globus file and directory transfer — copy","text":"copy() implements common task copying files folders collections. transfer() allows specification multiple transfer operations single task. copy() transfer() submit task initiate transaction, necessary check stataus task task_status(). also necessary manually cancel tasks fail task_cancel(). Globus documentation, https://docs.globus.org/api/transfer/task_submit/#document_types sections 2.2, 2.3, 2.4 describe options relevant copying directories files. https://docs.globus.org/api/transfer/task_submit/#errors describes errors task submission. task_cancel() prints message indicating successful submission task cancelation operation.","code":""},{"path":"https://mtmorgan.github.io/rglobus/reference/transfer.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Globus file and directory transfer — copy","text":"","code":"my_collection <- my_collections() hubmap <-     collections(\"HuBMAP Public\") |>     dplyr::filter(display_name == \"HuBMAP Public\")  ## ## File and directory copying ##  ## HubMAP dataset id, from HuBMAPR::datasets() dataset_id <- \"d1dcab2df80590d8cd8770948abaf976\" ls(hubmap, dataset_id) #> [1] \"display_name\" \"id\"            ## copy file from HuBMAP dataset to `my_collection` source_path <- paste0(dataset_id, \"/metadata.json\") destination_path <- paste0(\"tmp/HuBMAP/\", source_path) task <- copy(     hubmap, my_collection,     source_path, destination_path ) task #> # A tibble: 1 × 3 #>   submission_id                        task_id                             code  #>   <chr>                                <chr>                               <chr> #> 1 76cc6705-58f8-11ef-b917-c30b78766494 76cc6704-58f8-11ef-b917-c30b787664… Acce…  ## default task label transfer_label() #> [1] \"2024-08-12 18:16:04-0400 ma38727 r-globus-transfer\"  ## check transfer task status task_status(task) #> # A tibble: 1 × 3 #>   status nice_status task_id                              #>   <chr>  <chr>       <chr>                                #> 1 ACTIVE Queued      76cc6704-58f8-11ef-b917-c30b78766494  ## tasks that are failing need to be cancelled if (FALSE) { # \\dontrun{ task_cancel(task) } # }"}]
